{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"ul073WDztsNU"},"source":["# Image Classification on Fashion MNIST with TensorFlow-Quantum and Cirq"]},{"cell_type":"markdown","metadata":{"id":"FDtXZb18m0Jq"},"source":["## About the Dataset and QML"]},{"cell_type":"markdown","metadata":{"id":"ecq9vXs7opLM"},"source":["The original MNIST dataset contains a lot of handwritten digits. People from AI/ML/Data Science community love this dataset and use it as a benchmark to validate their algorithms. In fact, MNIST is often the first dataset they would try on. ***“If it doesn’t work on MNIST, it won’t work at all”***, they said. ***“Well, if it does work on MNIST, it may still fail on others.”*** Fashion-MNIST is intended to serve as a direct drop-in replacement for the original MNIST dataset to benchmark machine learning algorithms, as it shares the same image size and the structure of training and testing splits."]},{"cell_type":"markdown","metadata":{"id":"TBbNH7k6qSgt"},"source":["We shall perform QML on Fashion MNIST dataset using TensorFLow Quantum and Cirq.\n","\n","[TensorFlow-Quantum](https://www.tensorflow.org/quantum/tutorials) is a great place to start learning QML and get into this amazing field. TensorFlow Quantum (TFQ) is a quantum machine learning library for rapid prototyping of hybrid quantum-classical ML models.TensorFlow Quantum focuses on quantum data and building hybrid quantum-classical models. It integrates quantum computing algorithms and logic designed in Cirq, and provides quantum computing primitives compatible with existing TensorFlow APIs, along with high-performance quantum circuit simulators.\n","\n","[Cirq](https://quantumai.google/cirq) is a Python software library for writing, manipulating, and optimizing quantum circuits, and then running them on quantum computers and quantum simulators. Cirq provides useful abstractions for dealing with today’s noisy intermediate-scale quantum computers, where details of the hardware are vital to achieving state-of-the-art results."]},{"cell_type":"markdown","metadata":{"id":"AOCdlEjxKoRN"},"source":["Today's(NISQ Era) Quantum Computer are not very powerful and have various limitations. Also, the field of Quantum Machine Learning is currently evolving. To keep things simple, we will modify the Fashion MNIST dataset by making classification on only two classes - Sandal and Ankle boot. The reason to choose these classes is that they are similar to each other and therefore, it ascertains that the classification problem doesn't become very easy. The image shape in the provided dataset is (28,28), but we need to downscale the images to classify them using QML due to the hardware restrictions. We will downscale the images so that they have the shape (4,4)."]},{"cell_type":"markdown","metadata":{"id":"1mB2jAsznFZK"},"source":["Number of Images in the Train Dataset - 10200\n","\n","Number of Images in the Validation Dataset - 1800\n","\n","Number of Images in the Test Dataset - 2000\n","\n","Size of each Image - (2,2)\n","\n","Type of Image - Grayscale Image\n","\n","Number of Labels - 2\n","\n","\n","~~~\n","Label\tDescription\n","5\t    Sandal\n","9\t    Ankle boot\n","~~~"]},{"cell_type":"markdown","metadata":{"id":"_Xi8mJUptn42"},"source":["## Installing required packages"]},{"cell_type":"code","metadata":{"id":"Xj9X94SHs7_o","executionInfo":{"status":"ok","timestamp":1716784435136,"user_tz":-360,"elapsed":3480,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# installing TensorFLow Version 2.3.1\n","from IPython.display import clear_output\n","!pip install -q tensorflow==2.3.1\n","clear_output()"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"jEFDCf90oOwN","executionInfo":{"status":"ok","timestamp":1716784461155,"user_tz":-360,"elapsed":26025,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# install tensorflow quantum\n","!pip install -q tensorflow_quantum\n","clear_output()"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kr4kAs3ipWYN","executionInfo":{"status":"ok","timestamp":1716784514867,"user_tz":-360,"elapsed":53719,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#install cirq\n","!pip install cirq\n","clear_output()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4E3JNaVwu-SX"},"source":["## Importing the dataset and required packages"]},{"cell_type":"code","metadata":{"id":"otBjLV4ovAqm","executionInfo":{"status":"ok","timestamp":1716784525859,"user_tz":-360,"elapsed":11007,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["import tensorflow as tf\n","\n","# Data Processing tools\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","\n","# QML tools\n","import tensorflow_quantum as tfq\n","import cirq\n","import sympy\n","\n","# Visualization Tools\n","from cirq.contrib.svg import SVGCircuit\n","import matplotlib.pyplot as plt"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MxejhA8Iumpu","outputId":"593f1bf5-ea6c-47dd-d9c8-1e729c058aa9","executionInfo":{"status":"ok","timestamp":1716784525859,"user_tz":-360,"elapsed":11,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Lets print the version of cirq and tfq that we will use\n","print(\"We are using the TensorFlow-Quantum version {}\".format(tfq.__version__))\n","print(\"We are using the Cirq version {}\".format(cirq.__version__))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["We are using the TensorFlow-Quantum version 0.7.2\n","We are using the Cirq version 1.3.0\n"]}]},{"cell_type":"code","metadata":{"id":"nvAb6_0xnBRX","executionInfo":{"status":"ok","timestamp":1716784525860,"user_tz":-360,"elapsed":10,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#importing the Fashion MNIST dataset from keras\n","from tensorflow.keras.datasets import fashion_mnist as dataset"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"7_xF9rR-rNFz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716784528445,"user_tz":-360,"elapsed":2595,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}},"outputId":"850247c3-f2a2-495c-959e-9ef40ea1c7ab"},"source":["(X_train, y_train), (X_test, y_test) = dataset.load_data()"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","29515/29515 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26421880/26421880 [==============================] - 1s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","5148/5148 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4422102/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kFlj0AvvrqIW","outputId":"817e269e-1ffc-4924-d131-bffc1859cf5d","executionInfo":{"status":"ok","timestamp":1716784528446,"user_tz":-360,"elapsed":16,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["print(\"The shape of the X_train is {}\".format( X_train.shape))\n","print(\"The shape of the y_train is {}\".format(y_train.shape))\n","print(\"The shape of the X_test is {}\".format(X_test.shape))\n","print(\"The shape of the y_test is {}\".format(y_test.shape))"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of the X_train is (60000, 28, 28)\n","The shape of the y_train is (60000,)\n","The shape of the X_test is (10000, 28, 28)\n","The shape of the y_test is (10000,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"jDyH0wwXwCOK"},"source":["## Preprocessing the Dataset"]},{"cell_type":"code","metadata":{"id":"3z2lgVw1wELa","executionInfo":{"status":"ok","timestamp":1716784528446,"user_tz":-360,"elapsed":15,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["def filter_data(x, y):\n","  \"\"\"\n","  Helper Function to filter the dataset\n","  \"\"\"\n","  #filter the data using labels\n","  keep = (y == 5) | (y == 9)\n","  x, y = x[keep], y[keep]\n","\n","  # convert labels to boolean\n","  # y = True if y==5\n","  # y = False if y==9\n","  y = y == 5\n","  return x,y"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"jQHzPIhA6og7","executionInfo":{"status":"ok","timestamp":1716784528447,"user_tz":-360,"elapsed":16,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Filter the train set\n","X_train, y_train = filter_data(X_train, y_train)\n","\n","#Filter the test_set\n","X_test, y_test = filter_data(X_test, y_test)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DU7rvKtu-CSu","outputId":"04a31718-9926-4a50-800d-4c406d828a2d","executionInfo":{"status":"ok","timestamp":1716784528447,"user_tz":-360,"elapsed":15,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Let's have a look at the shapes of train and test data\n","print(\"The shape of the X_train is {}\".format( X_train.shape))\n","print(\"The shape of the y_train is {}\".format(y_train.shape))\n","print(\"The shape of the X_test is {}\".format(X_test.shape))\n","print(\"The shape of the y_test is {}\".format(y_test.shape))"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of the X_train is (12000, 28, 28)\n","The shape of the y_train is (12000,)\n","The shape of the X_test is (2000, 28, 28)\n","The shape of the y_test is (2000,)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":469},"id":"Ymg4FvbDsmbO","outputId":"601b6e31-7649-4f51-ee98-f465c6b22dd1","executionInfo":{"status":"ok","timestamp":1716784528447,"user_tz":-360,"elapsed":14,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Let's have a look at the first image from our X_train and the\n","# corresponding label from y_train\n","print(\"The First Image has the label {}\".format(y_train[0]))\n","plt.imshow(X_train[0])\n","plt.colorbar()\n","plt.title('Visualization of the Dataset')\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["The First Image has the label False\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"e7QO_qj5uTN9"},"source":["From the colorbar in the above visualization, it is clear that we have grayscale images in the dataset and hence their values range from 0 to 255. However, we would like to scale these pixel values in our dataset so that the values range from 0 to 1. This will help us to converge our CNN training faster"]},{"cell_type":"code","metadata":{"id":"e3qqMcOFvr5b","executionInfo":{"status":"ok","timestamp":1716784528944,"user_tz":-360,"elapsed":508,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Normalizing the train and test image data\n","X_train = X_train/255.0\n","X_test = X_test/ 255.0"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"Bevkendhuzsq","outputId":"7f6ed2e5-550b-4b65-de0c-3987602d3371","executionInfo":{"status":"ok","timestamp":1716784528945,"user_tz":-360,"elapsed":508,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Let's again have a look at the first image from our X_train and\n","#see if we have successfully normalized the datasets\n","plt.imshow(X_train[0])\n","plt.colorbar()\n","plt.title('Visualization of the Dataset')\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAesAAAGzCAYAAAAPLj87AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABEmElEQVR4nO3de1yUZf4//tcwwgByEjkrIh7JVGwxEM1DSaKWp7TU/CWypeVCpXzazFLQ2o3NNmPX9bAdPOSGx0q/mQ9MWdFKzNLIzDQPmEdQPACinGau3x8ukyODzjUzMPftvJ77uB8b99zv+7rmZuQ913Vf93VphBACREREpFgujq4AERER3R6TNRERkcIxWRMRESkckzUREZHCMVkTEREpHJM1ERGRwjFZExERKRyTNRERkcIxWRMRESkck/Vdbvny5dBoNDhx4oTi6jFgwAAMGDCgyeviqHJlFBcXY8yYMWjZsiU0Gg2ysrKkzzFp0iR4eXnZv3JE1OSYrFVm+PDh8PT0RHl5eYPHTJgwAW5ubrh48WIT1kxZDh48iDlz5jj8S4q1pk+fji1btmDmzJlYuXIlBg8ebPa4a9euYc6cOcjLy2vaCt5kzpw50Gg0xs3T0xNt2rTBsGHDsGzZMlRVVVl97s2bN2POnDn2q6yN3nzzTWzYsMHR1SBnJEhVVq9eLQCIFStWmH29oqJCNG/eXAwbNkwIIURtba24fv26MBgMTVnNepYtWyYAiMLCQuO+qqoqUVVV1SjlrVu3TgAQ27dvr/daY5ZrL8HBwWLChAl3PO7ChQsCgMjIyKj3WlJSkmjevHkj1M5URkaGACAWL14sVq5cKT744AMxd+5c0bt3bwFAdO/eXZw8edKqc6ekpAgl/Zlq3ry5SEpKcnQ1yAk1c+D3BLLC8OHD4e3tjezsbEycOLHe6xs3bkRFRQUmTJgAANBqtdBqtU1dTYu4ubk5Vbkyzp8/Dz8/P0dXQ8qYMWMQEBBg/Dk9PR0ff/wxJk6ciMcffxy7d+92YO2IVM7R3xZIXlJSkmjWrJkoLi6u99qjjz4qvL29xbVr14QQ5lu03333nRg0aJBo2bKlcHd3F23bthXJycnG17dv3262VVpYWCgAiGXLlhn3/fjjjyIpKUlERkYKnU4ngoODRXJysigpKTGJNVeP/v37i/79+xt/joiIEADMbnV1OXHihJg6daro1KmTcHd3F/7+/mLMmDEm560rq6Fz3FquEEIUFxeLP/7xjyIoKEjodDrRvXt3sXz5crPv/+233xb//ve/Rbt27YSbm5vo2bOn2LNnT73fhTnHjh0TY8aMES1atBAeHh4iLi5ObNq06Y51N6euPrduda3supb16dOnxYgRI0Tz5s1FQECA+L//+z9RW1trci69Xi/effdd0aVLF6HT6URQUJCYMmWKuHTp0h3fU13L+sKFC2ZfnzJligAgvvzyS+O+nTt3ijFjxojw8HDh5uYmWrduLaZNm2b83NbV/3bX4u233xbx8fHC399fuLu7iz/84Q9i3bp19cr/8ssvRZ8+fYSvr69o3ry56NSpk5g5c6bJMZWVlSI9PV20b9/eWJ8///nPorKy0niMubqwlU1NhS1rFZowYQJWrFiBtWvXIjU11bj/0qVL2LJlC8aPHw8PDw+zsefPn8egQYMQGBiIV155BX5+fjhx4gQ+/fRTq+qydetWHD9+HMnJyQgJCcHPP/+M9957Dz///DN2794NjUZj8bmysrJw9epVk33vvvsuCgoK0LJlSwDAd999h127dmHcuHFo3bo1Tpw4gcWLF2PAgAE4ePAgPD090a9fP7zwwgv45z//iVdffRX33HMPABj//1bXr1/HgAEDcPToUaSmpiIyMhLr1q3DpEmTcOXKFbz44osmx2dnZ6O8vBzPPvssNBoN5s2bh8ceewzHjx+Hq6trg++vuLgYvXv3xrVr1/DCCy+gZcuWWLFiBYYPH47169dj1KhR6NevH1auXImnnnoKDz/8sNnekzqBgYFYvHgxpk6dilGjRuGxxx4DAHTv3t14jF6vR2JiIuLi4vD3v/8d27ZtwzvvvIP27dtj6tSpxuOeffZZLF++HMnJyXjhhRdQWFiIf/3rX/jhhx/wzTff3PZ93clTTz2F9957D19++SUefvhhAMC6detw7do1TJ06FS1btsSePXuwYMECnD59GuvWrTPW6ezZs9i6dStWrlxZ77z/+Mc/MHz4cEyYMAHV1dVYvXo1Hn/8cWzatAmPPPIIAODnn3/Go48+iu7du+P111+HTqfD0aNH8c033xjPYzAYMHz4cHz99deYMmUK7rnnHvz0009499138euvvxrvUa9cuRLPPPMMYmNjMWXKFABA+/btrb4uRFIc/W2B5NXW1orQ0FARHx9v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\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"Cfgtl9kUD9H5","executionInfo":{"status":"ok","timestamp":1716784528945,"user_tz":-360,"elapsed":9,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Before proceeding, we need to reshape our images in the dataset\n","X_train = X_train.reshape(X_train.shape[0], *(28,28,1))\n","X_test = X_test.reshape(X_test.shape[0], *(28,28,1))"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"cvBKLXbc_cZg","executionInfo":{"status":"ok","timestamp":1716784528946,"user_tz":-360,"elapsed":9,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Downscaling the images\n","X_train = tf.image.resize(X_train, (2,2)).numpy()\n","X_test = tf.image.resize(X_test, (2,2)).numpy()\n"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"iKWbEihSJBX_","outputId":"f34cf0a2-d8b8-4f19-b4c4-3fa464bb7775","executionInfo":{"status":"ok","timestamp":1716784529569,"user_tz":-360,"elapsed":631,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Let's again have a look at the first image from our resized X_train\n","plt.imshow(X_train[0,:,:,0])\n","plt.colorbar()\n","plt.title('Visualization of the Resized Dataset')\n","plt.show()"],"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"-yiNywWqP610","executionInfo":{"status":"ok","timestamp":1716786063721,"user_tz":-360,"elapsed":353,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Splitting the training fdataset into train and validation datasets\n","X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.15, random_state=0)"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jy57uzOT-LvY","outputId":"3e9c1f0e-ab97-45c9-aa2d-0e13c7eeaea2","executionInfo":{"status":"ok","timestamp":1716784529571,"user_tz":-360,"elapsed":19,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["print(\"The shape of the X_train is {}\".format(X_train.shape))\n","print(\"The shape of the y_train is {}\".format(y_train.shape))\n","print(\"The shape of the X_valid is {}\".format(X_valid.shape))\n","print(\"The shape of the y_valid is {}\".format(y_valid.shape))"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of the X_train is (10200, 2, 2, 1)\n","The shape of the y_train is (10200,)\n","The shape of the X_valid is (1800, 2, 2, 1)\n","The shape of the y_valid is (1800,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"hDTiCqXpPQ4x"},"source":["## Data Encoding"]},{"cell_type":"markdown","metadata":{"id":"j54vI9ydZUfc"},"source":["Steps involved in Data Encoding:\n","\n","* Processing pixel values for binary encoding\n","\n","* Converting Cirq Circuits to tfq tensors"]},{"cell_type":"markdown","metadata":{"id":"dJCkl4_tfERJ"},"source":["**Step 1: Processing Pixel Values for Binary Encoding**"]},{"cell_type":"code","metadata":{"id":"mhxgJsxhfuzZ","executionInfo":{"status":"ok","timestamp":1716784529571,"user_tz":-360,"elapsed":16,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# FLattening the images\n","X_train = X_train.reshape(X_train.shape[0], *(1,4,1))\n","X_valid = X_valid.reshape(X_valid.shape[0], *(1,4,1))\n","X_test = X_test.reshape(X_test.shape[0], *(1,4,1))"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DtYwPoLPd6iH"},"source":["### Processing X_train"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FuJABwN8eGNc","outputId":"60d09d88-ad5c-433d-9390-cfed906275b9","executionInfo":{"status":"ok","timestamp":1716784529571,"user_tz":-360,"elapsed":15,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Let's have a look on the first example\n","print(X_train[0])"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.        ]\n","  [0.41568628]\n","  [0.7137255 ]\n","  [0.73921573]]]\n"]}]},{"cell_type":"code","metadata":{"id":"rIzIktKfhXRi","executionInfo":{"status":"ok","timestamp":1716784529572,"user_tz":-360,"elapsed":13,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["\n","def binary_encode(X,threshold=0.5):\n","  \"\"\"\n","  Encodes the given datset to use binary encoding\n","\n","  Parameters:\n","  X(array) : Image data to be processed for encoding\n","  threshold(float): Threshold for binary encoding, 0.5 by default\n","\n","  Returns:\n","  encoded_images(array): Binary encoded Image Data\n","\n","  \"\"\"\n","  encoded_images = list()\n","  for image in X:\n","    # pixel value is 1 if it's greater than threshold or else zero\n","    encoded_image = [1 if j>threshold else 0 for j in image[0]]\n","    encoded_images.append(encoded_image)\n","  return np.array(encoded_images)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"eymmTOimcxSN","executionInfo":{"status":"ok","timestamp":1716784530122,"user_tz":-360,"elapsed":562,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_train = binary_encode(X_train)"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sESCMm_xc47k","outputId":"48c6348a-ef2e-4b91-d187-40d9d7a7faa9","executionInfo":{"status":"ok","timestamp":1716784530122,"user_tz":-360,"elapsed":6,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Now, Let's have a look on the first example again\n","print(X_train[0])"],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 1 1]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PCv2dDsmfMOM","outputId":"a0f69f0d-dd7a-4ab1-a7b6-2854fe84b569","executionInfo":{"status":"ok","timestamp":1716784530122,"user_tz":-360,"elapsed":5,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["print(\"The shape of the X_train is {}\".format(X_train.shape))"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of the X_train is (10200, 4)\n"]}]},{"cell_type":"code","metadata":{"id":"0P6g8CypTktk","executionInfo":{"status":"ok","timestamp":1716784530123,"user_tz":-360,"elapsed":5,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["def create_circuit_from_image(encoded_image):\n","  \"\"\"\n","  Returns a circuit for given encoded image\n","\n","  Parameters:\n","  encoded_image (array): Encoded Image\n","\n","  Returns:\n","  circuit (cirq.Circuit object): cirq circuit\n","  \"\"\"\n","  qubits = cirq.GridQubit.rect(2,2)\n","  circuit = cirq.Circuit()\n","  for i, pixel in enumerate(encoded_image):\n","    if pixel:\n","      circuit.append(cirq.X(qubits[i]))\n","  return circuit"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"sTNIeH-2WA8-","executionInfo":{"status":"ok","timestamp":1716784530502,"user_tz":-360,"elapsed":383,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_train = [create_circuit_from_image(encoded_image) for encoded_image in X_train]"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g8kkNTVvWiBm","outputId":"58e700b6-3695-4433-de62-2d2a44a9d1e3","executionInfo":{"status":"ok","timestamp":1716784530503,"user_tz":-360,"elapsed":4,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Let's have a look at the circuit for the first image\n","print(X_train[0])"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 0): ───X───\n","\n","(1, 1): ───X───\n"]}]},{"cell_type":"markdown","metadata":{"id":"fUaCe4BLXM3m"},"source":["Recall that the values for the first image were 0,0,1,1. This implies that we should apply X or NOT gate the last two qubuts since all the qubits are intially in the 0 states. Applying a X gate will change this state from zero to one. Therefore, we shall apply X Gate on the last two qubits. We have initialized the four qubits in a rectangular grid. Therefore, the initialized qubits are (0,0), (0,1), (1,0) and (1,1). In the above circuit diagram, note that we have a X gate on the qubits (1,0) and (1,1) which are the last two qubits. Hence, we have successfully created circuit for our image."]},{"cell_type":"markdown","metadata":{"id":"RCU6S7WhZ3Ct"},"source":["**Step 2: Converting Cirq Circuits to tfq Tensors**"]},{"cell_type":"code","metadata":{"id":"MM-yJnfcZ2VO","executionInfo":{"status":"ok","timestamp":1716784537133,"user_tz":-360,"elapsed":6633,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_train_tfq = tfq.convert_to_tensor(X_train)"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nRdvapAEalmd"},"source":["### Processing X_valid and X_test"]},{"cell_type":"code","metadata":{"id":"LbofYr2faX9J","executionInfo":{"status":"ok","timestamp":1716784537134,"user_tz":-360,"elapsed":14,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_valid = binary_encode(X_valid)\n","X_test = binary_encode(X_test)"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"V5HoVBnXbLeP","executionInfo":{"status":"ok","timestamp":1716784537699,"user_tz":-360,"elapsed":578,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_valid = [create_circuit_from_image(encoded_image) for encoded_image in X_valid]\n","X_test = [create_circuit_from_image(encoded_image) for encoded_image in X_test]"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"YsQE1fdFbcV0","executionInfo":{"status":"ok","timestamp":1716784540190,"user_tz":-360,"elapsed":2493,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["X_valid_tfq = tfq.convert_to_tensor(X_valid)\n","X_test_tfq = tfq.convert_to_tensor(X_test)"],"execution_count":32,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2Oo5q95fPT6n"},"source":["## Quantum Neural Network"]},{"cell_type":"markdown","metadata":{"id":"RM86REiy7ChU"},"source":["### Build the QNN"]},{"cell_type":"markdown","metadata":{"id":"m_lrpb-TcCJG"},"source":["Building the Quantum Neural Network involves two steps\n","\n","* build a class that adds gates layer by layer\n","\n","* define the QNN using the class from the above step"]},{"cell_type":"code","metadata":{"id":"DycQEj54JrLW","executionInfo":{"status":"ok","timestamp":1716784540190,"user_tz":-360,"elapsed":7,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["class QNN():\n","    def __init__(self, data_qubits, readout):\n","      self.data_qubits = data_qubits\n","      self.readout = readout\n","\n","    def add_singleQubit_gate(self,circuit, gate, qubit_index):\n","      \"\"\"\n","      Adds single qubit gate to the circuit\n","      Parameters:\n","      circuit(cirq.Circuit object): Cirq circuit\n","      gate(cirq gate): gate to append to the circuit\n","      qubits(list): index of qubits to apply the gate\n","      Returns:\n","      None\n","      \"\"\"\n","      for index in qubit_index:\n","        circuit.append(gate(self.data_qubits[index]))\n","\n","    def add_twoQubit_gate(self,circuit, gate, qubit_index):\n","      \"\"\"\n","      Adds two qubit gate to the circuit\n","      Parameters:\n","      circuit(cirq.Circuit object): Cirq circuit\n","      gate(cirq gate): gate to append to the circuit\n","      qubits(list): index of qubits to apply the gate\n","      Returns:\n","      None\n","      \"\"\"\n","      if len(qubit_index)!=2:\n","        raise Exception(\"The length of the list of indices passed for two qubit \\\n","        gate operations must be equal to two\")\n","      circuit.append(gate(self.data_qubits[qubit_index[0]], self.data_qubits[qubit_index[1]]))\n","\n","    def add_layer(self, circuit, gate, symbol_gate):\n","      \"\"\"\n","      Adds New Gates/Layers to the Circuit\n","      Parameters:\n","      circuit(cirq.Circuit object): Cirq circuit\n","      gate(cirq gate): gate to append to the circuit\n","      symbol_gate(string): symbol for the gate\n","      Returns:\n","      None\n","      \"\"\"\n","      for i, qubit in enumerate(self.data_qubits):\n","        symbol = sympy.Symbol(symbol_gate+ '-' + str(i))\n","        circuit.append(gate(qubit, self.readout)**symbol)\n"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"sQxpS03x1VKT","executionInfo":{"status":"ok","timestamp":1716784540190,"user_tz":-360,"elapsed":6,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["def create_qnn():\n","    \"\"\"Create a QNN model circuit and readout operation to go along with it.\"\"\"\n","    data_qubits = cirq.GridQubit.rect(2,2)  # a 4x4 grid.\n","    readout = cirq.GridQubit(-1, -1)         # a single qubit at [-1,-1]\n","    circuit = cirq.Circuit()\n","\n","    # Prepare the readout qubit.\n","    circuit.append(cirq.X(readout))\n","    circuit.append(cirq.H(readout))\n","\n","    qnn = QNN(\n","        data_qubits = data_qubits,\n","        readout=readout)\n","\n","    \"\"\"\n","    # Though we don't use single and double Qubit Gates in our Circuit, we provide\n","    # the methods \"add_singleQubit_gate\" and \"add_twoQubit_gate\" for our Class QNN\n","    # that can be used to add Single and Double Qubit Gates respectively.\n","    # An exmaple is shown below:\n","\n","    #Add Hadamard Gates\n","    qnn.add_singleQubit_gate(circuit, cirq.H, [0,1,2,3])\n","\n","    #Add CNOT gates\n","    qnn.add_twoQubit_gate(circuit, cirq.CNOT, [0, 1])\n","    qnn.add_twoQubit_gate(circuit, cirq.CNOT, [2, 3])\n","    \"\"\"\n","\n","    # Add the ising coupling XX gate\n","    qnn.add_layer(circuit, cirq.XX, \"xx\")\n","    qnn.add_layer(circuit, cirq.ZZ, \"zz\")\n","\n","    # Finally, prepare the readout qubit.\n","    circuit.append(cirq.H(readout))\n","\n","    return circuit, cirq.Z(readout)"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"bkW8IUUj3Ats","executionInfo":{"status":"ok","timestamp":1716784540191,"user_tz":-360,"elapsed":7,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["qmodel, model_readout = create_qnn()"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":688},"id":"B8SigYUiGE0g","outputId":"550795f6-0fd4-41f4-cc04-a9c8415441c2","executionInfo":{"status":"ok","timestamp":1716784540755,"user_tz":-360,"elapsed":570,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Let's have a look at our Qauntum Circuit that will perform the classification\n","SVGCircuit(qmodel)"],"execution_count":36,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'Arial' not found.\n"]},{"output_type":"execute_result","data":{"text/plain":["<cirq.contrib.svg.svg.SVGCircuit at 0x7c46050ad990>"],"image/svg+xml":"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1097.236875\" height=\"250.0\"><line x1=\"39.810625\" x2=\"1067.236875\" y1=\"25.0\" y2=\"25.0\" stroke=\"#1967d2\" stroke-width=\"1\" /><line x1=\"39.810625\" x2=\"1067.236875\" y1=\"75.0\" y2=\"75.0\" stroke=\"#1967d2\" stroke-width=\"1\" /><line x1=\"39.810625\" x2=\"1067.236875\" y1=\"125.0\" y2=\"125.0\" stroke=\"#1967d2\" stroke-width=\"1\" /><line x1=\"39.810625\" x2=\"1067.236875\" y1=\"175.0\" y2=\"175.0\" stroke=\"#1967d2\" stroke-width=\"1\" /><line x1=\"39.810625\" x2=\"1067.236875\" y1=\"225.0\" y2=\"225.0\" stroke=\"#1967d2\" stroke-width=\"1\" /><line x1=\"249.99353515625\" x2=\"249.99353515625\" y1=\"25.0\" y2=\"75.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"350.73810546875006\" x2=\"350.73810546875006\" y1=\"25.0\" y2=\"125.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"451.48267578125007\" x2=\"451.48267578125007\" y1=\"25.0\" y2=\"175.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"552.2272460937501\" x2=\"552.2272460937501\" y1=\"25.0\" y2=\"225.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"651.92919921875\" x2=\"651.92919921875\" y1=\"25.0\" y2=\"75.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"750.58853515625\" x2=\"750.58853515625\" y1=\"25.0\" y2=\"125.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"849.2478710937501\" x2=\"849.2478710937501\" y1=\"25.0\" y2=\"175.0\" stroke=\"black\" stroke-width=\"3\" /><line x1=\"947.9072070312501\" x2=\"947.9072070312501\" y1=\"25.0\" y2=\"225.0\" stroke=\"black\" stroke-width=\"3\" /><rect x=\"10.0\" y=\"5.0\" width=\"59.62125\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"0\" /><text x=\"39.810625\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">(-1, -1): </text><rect x=\"10.0\" y=\"55.0\" width=\"59.62125\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"0\" /><text x=\"39.810625\" y=\"75.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">(0, 0): </text><rect x=\"10.0\" y=\"105.0\" width=\"59.62125\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"0\" /><text x=\"39.810625\" y=\"125.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">(0, 1): </text><rect x=\"10.0\" y=\"155.0\" width=\"59.62125\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"0\" /><text x=\"39.810625\" y=\"175.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">(1, 0): </text><rect x=\"10.0\" y=\"205.0\" width=\"59.62125\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"0\" /><text x=\"39.810625\" y=\"225.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">(1, 1): </text><rect x=\"89.62125\" y=\"5.0\" width=\"40\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"109.62125\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"18px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">X</text><rect x=\"149.62125\" y=\"5.0\" width=\"40\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"169.62125\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"18px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">H</text><rect x=\"209.62125\" y=\"55.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"249.99353515625\" y=\"75.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX^(xx-0)</text><rect x=\"209.62125\" y=\"5.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"249.99353515625\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX</text><rect x=\"310.36582031250003\" y=\"105.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"350.73810546875006\" y=\"125.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX^(xx-1)</text><rect x=\"310.36582031250003\" y=\"5.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"350.73810546875006\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX</text><rect x=\"411.11039062500004\" y=\"155.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"451.48267578125007\" y=\"175.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX^(xx-2)</text><rect x=\"411.11039062500004\" y=\"5.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"451.48267578125007\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX</text><rect x=\"511.85496093750004\" y=\"205.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"552.2272460937501\" y=\"225.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX^(xx-3)</text><rect x=\"511.85496093750004\" y=\"5.0\" width=\"80.74457031250002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"552.2272460937501\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">XX</text><rect x=\"612.59953125\" y=\"55.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"651.92919921875\" y=\"75.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ^(zz-0)</text><rect x=\"612.59953125\" y=\"5.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"651.92919921875\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ</text><rect x=\"711.2588671875001\" y=\"105.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"750.58853515625\" y=\"125.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ^(zz-1)</text><rect x=\"711.2588671875001\" y=\"5.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"750.58853515625\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ</text><rect x=\"809.9182031250001\" y=\"155.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"849.2478710937501\" y=\"175.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ^(zz-2)</text><rect x=\"809.9182031250001\" y=\"5.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"849.2478710937501\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ</text><rect x=\"908.5775390625001\" y=\"205.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"947.9072070312501\" y=\"225.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ^(zz-3)</text><rect x=\"908.5775390625001\" y=\"5.0\" width=\"78.65933593750002\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"947.9072070312501\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"14px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">ZZ</text><rect x=\"1007.236875\" y=\"5.0\" width=\"40\" height=\"40\" stroke=\"black\" fill=\"white\" stroke-width=\"1\" /><text x=\"1027.236875\" y=\"25.0\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"18px\" font-family=\"Arial:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0\">H</text></svg>"},"metadata":{},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"fi0bmTsp3VHB","executionInfo":{"status":"ok","timestamp":1716784544797,"user_tz":-360,"elapsed":4047,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["model = tf.keras.Sequential([\n","\n","    # The input is the data-circuit, encoded as a tf.string\n","    tf.keras.layers.Input(shape=(), dtype=tf.string),\n","\n","\n","    # The PQC stands for Paramaterized Quantum Circuit\n","    # This returns the expectation value\n","    tfq.layers.PQC(qmodel, model_readout),\n","])"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"-Es8_ATXDFL6","executionInfo":{"status":"ok","timestamp":1716784544797,"user_tz":-360,"elapsed":18,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# To use Hinge Loss, we convert the labels to 1 and -1\n","y_train_h = np.array([1 if i==1 else -1 for i in y_train ])\n","y_valid_h = np.array([1 if i==1 else -1 for i in y_valid ])\n","y_test_h = np.array([1 if i==1 else -1 for i in y_test ])"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tueGJaAWOtWf","outputId":"780910ac-bea7-44f9-b18b-2cfb88301fff","executionInfo":{"status":"ok","timestamp":1716784544798,"user_tz":-360,"elapsed":18,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Let's have a look at the first label from the training dataset\n","print(y_train_h[0])"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"code","metadata":{"id":"Ifriy2HyoI-O","executionInfo":{"status":"ok","timestamp":1716784544798,"user_tz":-360,"elapsed":17,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Define the custom Hinge Accuracy\n","def hinge_accuracy(y_true, y_pred):\n","    y_true = tf.squeeze(y_true) > 0.0\n","    y_pred = tf.squeeze(y_pred) > 0.0\n","    result = tf.cast(y_true == y_pred, tf.float32)\n","\n","    return tf.reduce_mean(result)"],"execution_count":40,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WUewMTq87Hl3"},"source":["### Train the QNN"]},{"cell_type":"code","metadata":{"id":"klSZErcc3kAz","executionInfo":{"status":"ok","timestamp":1716784544798,"user_tz":-360,"elapsed":16,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["model.compile(\n","    loss=tf.keras.losses.Hinge(),\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n","    metrics=[hinge_accuracy])"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nO3eEigt4HgT","outputId":"8d71e3f0-9be7-4af9-9c28-c64c26b62ead","executionInfo":{"status":"ok","timestamp":1716784638105,"user_tz":-360,"elapsed":93323,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["qnn_history = model.fit(\n","      X_train_tfq, y_train_h,\n","      batch_size=64,\n","      epochs=10,\n","      verbose=1,\n","      validation_data=(X_valid_tfq, y_valid_h))"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","160/160 [==============================] - 14s 70ms/step - loss: 0.8386 - hinge_accuracy: 0.6283 - val_loss: 0.6093 - val_hinge_accuracy: 0.7958\n","Epoch 2/10\n","160/160 [==============================] - 10s 61ms/step - loss: 0.4846 - hinge_accuracy: 0.8022 - val_loss: 0.4353 - val_hinge_accuracy: 0.7958\n","Epoch 3/10\n","160/160 [==============================] - 9s 57ms/step - loss: 0.4054 - hinge_accuracy: 0.8025 - val_loss: 0.4120 - val_hinge_accuracy: 0.7958\n","Epoch 4/10\n","160/160 [==============================] - 8s 49ms/step - loss: 0.3960 - hinge_accuracy: 0.8025 - val_loss: 0.4103 - val_hinge_accuracy: 0.7958\n","Epoch 5/10\n","160/160 [==============================] - 9s 58ms/step - loss: 0.3953 - hinge_accuracy: 0.8025 - val_loss: 0.4105 - val_hinge_accuracy: 0.7958\n","Epoch 6/10\n","160/160 [==============================] - 8s 50ms/step - loss: 0.3952 - hinge_accuracy: 0.8030 - val_loss: 0.4107 - val_hinge_accuracy: 0.7958\n","Epoch 7/10\n","160/160 [==============================] - 8s 52ms/step - loss: 0.3951 - hinge_accuracy: 0.8028 - val_loss: 0.4109 - val_hinge_accuracy: 0.7958\n","Epoch 8/10\n","160/160 [==============================] - 9s 55ms/step - loss: 0.3950 - hinge_accuracy: 0.8027 - val_loss: 0.4112 - val_hinge_accuracy: 0.7958\n","Epoch 9/10\n","160/160 [==============================] - 8s 50ms/step - loss: 0.3950 - hinge_accuracy: 0.8023 - val_loss: 0.4113 - val_hinge_accuracy: 0.7958\n","Epoch 10/10\n","160/160 [==============================] - 9s 59ms/step - loss: 0.3950 - hinge_accuracy: 0.8027 - val_loss: 0.4114 - val_hinge_accuracy: 0.7958\n"]}]},{"cell_type":"code","metadata":{"id":"WBY-ECy54qyC","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6382dedd-22a4-4dba-83da-616589571410","executionInfo":{"status":"ok","timestamp":1716784639214,"user_tz":-360,"elapsed":1126,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["model.evaluate(X_test_tfq, y_test_h)"],"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["63/63 [==============================] - 1s 14ms/step - loss: 0.3576 - hinge_accuracy: 0.8229\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.35755273699760437, 0.8229166865348816]"]},"metadata":{},"execution_count":43}]},{"cell_type":"markdown","metadata":{"id":"dw6i8L1RQIUI"},"source":["## Visualize the Results"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"NK6Aw5LdOiWh","outputId":"14620890-df63-4419-9ad4-197838689f3e","executionInfo":{"status":"ok","timestamp":1716784639998,"user_tz":-360,"elapsed":791,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Visualize Accuracy\n","plt.plot(qnn_history.history['hinge_accuracy'])\n","plt.plot(qnn_history.history['val_hinge_accuracy'])\n","plt.title('Model Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(['train','test'],loc=\"best\")\n","plt.show()"],"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"9IbgVjZQRAue","outputId":"6bc41636-2539-404e-bc71-0d378ada684a","executionInfo":{"status":"ok","timestamp":1716784640566,"user_tz":-360,"elapsed":572,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["# Visualize Loss\n","plt.plot(qnn_history.history['loss'])\n","plt.plot(qnn_history.history['val_loss'])\n","plt.title('Model Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['train','test'],loc=\"best\")\n","plt.show()"],"execution_count":45,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"nxx-qCBIRcih"},"source":["## Save The Model Weights"]},{"cell_type":"code","metadata":{"id":"Sh4pazWbRjR_","executionInfo":{"status":"ok","timestamp":1716784640566,"user_tz":-360,"elapsed":8,"user":{"displayName":"Mahmud Resin","userId":"07589721868181214858"}}},"source":["#Saving the weights\n","model.save_weights('/content/sample_data/QModelWeights')"],"execution_count":46,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iXLmchzKapew"},"source":["## Refernces"]},{"cell_type":"markdown","metadata":{"id":"_fx9p7mparf3"},"source":["* https://www.tensorflow.org/quantum/tutorials/mnist\n","* https://quantumai.google/cirq/tutorials\n","* [Paper by Farhi et al.](https://arxiv.org/pdf/1802.06002.pdf)\n","* [Paper by Dmitri Maslov](https://www.google.com/url?sa=t&source=web&rct=j&url=https://arxiv.org/pdf/1603.07678&ved=2ahUKEwi86KbBlfvuAhUmzDgGHfteCIsQFjAJegQIHhAC&usg=AOvVaw04beRgWLMZhYBV6GpyygHF)"]}]}